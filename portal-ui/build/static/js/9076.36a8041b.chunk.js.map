{"version":3,"file":"static/js/9076.36a8041b.chunk.js","mappings":"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","sources":["screens/Console/Common/WarningMessage/WarningMessage.tsx","screens/Console/Users/DeleteUser.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\n\ninterface IWarningMessage {\n  classes: any;\n  label: any;\n  title: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    headerContainer: {\n      backgroundColor: \"#e78794\",\n      borderRadius: 3,\n      marginBottom: 20,\n      padding: 1,\n      paddingBottom: 15,\n    },\n    labelHeadline: {\n      color: \"#000000\",\n      fontSize: 14,\n      marginLeft: 20,\n    },\n    labelText: {\n      color: \"#000000\",\n      fontSize: 14,\n      marginLeft: 20,\n      marginRight: 40,\n    },\n  });\n\nconst WarningMessage = ({ classes, label, title }: IWarningMessage) => {\n  return (\n    <div className={classes.headerContainer}>\n      <h4 className={classes.labelHeadline}>{title}</h4>\n      <div className={classes.labelText}>{label}</div>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(WarningMessage);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { DialogContentText } from \"@mui/material\";\nimport { setErrorSnackMessage } from \"../../../systemSlice\";\nimport useApi from \"../Common/Hooks/useApi\";\nimport ConfirmDialog from \"../Common/ModalWrapper/ConfirmDialog\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport { ConfirmDeleteIcon } from \"../../../icons\";\nimport { encodeURLString } from \"../../../common/utils\";\nimport WarningMessage from \"../Common/WarningMessage/WarningMessage\";\nimport TableWrapper from \"../Common/TableWrapper/TableWrapper\";\nimport api from \"../../../common/api\";\nimport { IAM_PAGES } from \"../../../common/SecureComponent/permissions\";\nimport Loader from \"../Common/Loader/Loader\";\ninterface IDeleteUserProps {\n  closeDeleteModalAndRefresh: (refresh: boolean) => void;\n  deleteOpen: boolean;\n  selectedUsers: string[] | null;\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n  history: any;\n}\n\nconst DeleteUser = ({\n  closeDeleteModalAndRefresh,\n  deleteOpen,\n  selectedUsers,\n  setErrorSnackMessage,\n  history,\n}: IDeleteUserProps) => {\n  const onDelSuccess = () => closeDeleteModalAndRefresh(true);\n  const onDelError = (err: ErrorResponseHandler) => setErrorSnackMessage(err);\n  const onClose = () => closeDeleteModalAndRefresh(false);\n\n  const [deleteLoading, invokeDeleteApi] = useApi(onDelSuccess, onDelError);\n  const [loadingSA, setLoadingSA] = useState<boolean>(true);\n  const [hasSA, setHasSA] = useState<boolean>(false);\n  const [userSAList, setUserSAList] = useState<userSACount[]>([]);\n\n  const userLoggedIn = localStorage.getItem(\"userLoggedIn\") || \"\";\n\n  useEffect(() => {\n    if (selectedUsers) {\n      api\n        .invoke(\"POST\", `/api/v1/users/service-accounts`, selectedUsers)\n        .then((res) => {\n          setUserSAList(res.userServiceAccountList);\n          if (res.hasSA) {\n            setHasSA(true);\n          }\n          setLoadingSA(false);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setErrorSnackMessage(err);\n          setLoadingSA(false);\n        });\n    }\n  }, [selectedUsers, setErrorSnackMessage]);\n\n  if (!selectedUsers) {\n    return null;\n  }\n  const renderUsers = selectedUsers.map((user) => (\n    <div key={user}>\n      <b>{user}</b>\n    </div>\n  ));\n  const viewAction = (selectionElement: any): void => {\n    history.push(\n      `${IAM_PAGES.USERS}/${encodeURLString(selectionElement.userName)}`\n    );\n  };\n  const tableActions = [\n    {\n      type: \"view\",\n      onClick: viewAction,\n    },\n  ];\n\n  const onConfirmDelete = () => {\n    for (let user of selectedUsers) {\n      if (user === userLoggedIn) {\n        setErrorSnackMessage({\n          errorMessage: \"Cannot delete currently logged in user\",\n          detailedError: `Cannot delete currently logged in user ${userLoggedIn}`,\n        });\n        closeDeleteModalAndRefresh(true);\n      } else {\n        invokeDeleteApi(\"DELETE\", `/api/v1/user/${encodeURLString(user)}`);\n      }\n    }\n  };\n\n  interface userSACount {\n    userName: string;\n    numSAs: number;\n  }\n\n  const noSAtext =\n    \"Are you sure you want to delete the following \" +\n    selectedUsers.length +\n    \" \" +\n    \"user\" +\n    (selectedUsers.length > 1 ? \"s?\" : \"?\");\n\n  return loadingSA ? (\n    <Loader />\n  ) : (\n    <ConfirmDialog\n      title={`Delete User${selectedUsers.length > 1 ? \"s\" : \"\"}`}\n      confirmText={\"Delete\"}\n      isOpen={deleteOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={deleteLoading}\n      onConfirm={onConfirmDelete}\n      onClose={onClose}\n      confirmationContent={\n        <DialogContentText>\n          {hasSA ? (\n            <Fragment>\n              <WarningMessage\n                label=\"Click on a user to view the full listing of asociated Service Accounts. All Service Accounts associated with a user will be deleted along with the user. Are you sure you want to continue?\"\n                title=\"Warning: One or more users selected has associated Service Accounts. \"\n              />\n              <TableWrapper\n                itemActions={tableActions}\n                columns={[\n                  { label: \"Username\", elementKey: \"userName\" },\n                  {\n                    label: \"# Associated Service Accounts\",\n                    elementKey: \"numSAs\",\n                  },\n                ]}\n                isLoading={loadingSA}\n                records={userSAList}\n                entityName=\"User Service Accounts\"\n                idField=\"userName\"\n                customPaperHeight=\"250\"\n              />\n            </Fragment>\n          ) : (\n            <Fragment>\n              {noSAtext}\n              {renderUsers}\n            </Fragment>\n          )}\n        </DialogContentText>\n      }\n    />\n  );\n};\n\nconst mapDispatchToProps = {\n  setErrorSnackMessage,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport default connector(DeleteUser);\n"],"names":["withStyles","theme","createStyles","headerContainer","backgroundColor","borderRadius","marginBottom","padding","paddingBottom","labelHeadline","color","fontSize","marginLeft","labelText","marginRight","classes","label","title","className","mapDispatchToProps","setErrorSnackMessage","connector","connect","closeDeleteModalAndRefresh","deleteOpen","selectedUsers","history","useApi","err","deleteLoading","invokeDeleteApi","useState","loadingSA","setLoadingSA","hasSA","setHasSA","userSAList","setUserSAList","userLoggedIn","localStorage","getItem","useEffect","api","then","res","userServiceAccountList","catch","renderUsers","map","user","tableActions","type","onClick","selectionElement","push","IAM_PAGES","encodeURLString","userName","noSAtext","length","confirmText","isOpen","titleIcon","isLoading","onConfirm","errorMessage","detailedError","onClose","confirmationContent","Fragment","itemActions","columns","elementKey","records","entityName","idField","customPaperHeight"],"sourceRoot":""}